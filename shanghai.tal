|00 @System     &vector $2 &wst      $1 &rst    $1 &eaddr  $2 &ecode  $1 &pad     $1 &r       $2 &g      $2 &b     $2 &debug  $1 &halt $1
|10 @Console    &vector $2 &read     $1 &pad    $5 &write  $1 &error  $1
|20 @Screen     &vector $2 &width    $2 &height $2 &auto   $1 &pad    $1 &x       $2 &y       $2 &addr   $2 &pixel $1 &sprite $1
|30 @Audio0     &vector $2 &position $2 &output $1 &pad    $3 &adsr   $2 &length  $2 &addr    $2 &volume $1 &pitch $1
|40 @Audio1     &vector $2 &position $2 &output $1 &pad    $3 &adsr   $2 &length  $2 &addr    $2 &volume $1 &pitch $1
|50 @Audio2     &vector $2 &position $2 &output $1 &pad    $3 &adsr   $2 &length  $2 &addr    $2 &volume $1 &pitch $1
|60 @Audio3     &vector $2 &position $2 &output $1 &pad    $3 &adsr   $2 &length  $2 &addr    $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button   $1 &key    $1 &func   $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state  $1 &pad    $3 &scrollx $2 &scrolly $2
|a0 @File0      &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name    $2 &length  $2 &read   $2 &write $2
|b0 @File1      &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name    $2 &length  $2 &read   $2 &write $2
|c0 @DateTime   &year   $2 &month    $1 &day    $1 &hour   $1 &minute $1 &second  $1 &dotw    $1 &doty   $2 &isdst $1

%Ext { #00 SWP }
%Mod { DIVk MUL SUB }
%Mod2 { DIV2k MUL2 SUB2 }
%Dbg { #01 .System/debug DEO }
%Ssx { .Screen/x DEO2 }
%Ssy { .Screen/y DEO2 }
%Ssa { .Screen/addr DEO2 }
%Spr { .Screen/sprite DEO }
%Sprr { .Screen/sprite DEOk DEO }
%Sprrr { .Screen/sprite DEOk DEOk DEO }
%Aut0 { #00 .Screen/auto DEO }
%Aut0ay { #06 .Screen/auto DEO }
%Aut1ay { #16 .Screen/auto DEO }
%Aut2ay { #26 .Screen/auto DEO }
%Aut1y { #12 .Screen/auto DEO }
%Ovrsb { ROTk NIP SWP } ( ss b -- ss b ss )
%Swpsb { ROT ROT } ( ss b -- b ss )

(
    !!! All numbers here are in hex. !!!

    Tiles are 10x18 pixels.
    The board is 20x10x5, accessed as board[z<<9 | y<<5 | x].

    The tiles are:

          01 02 03 04 05 06 07 08 09  dots
          0a 0b 0c 0d 0e 0f 10 11 12  bamboo
          13 14 15 16 17 18 19 1a 1b  chars
          1c 1d 1e 1f 20 21 22        honors
          23 24 25 26                 flowers
          27 28 29 2a                 seasons

    Tiles 01-22 match up with themselves: there's four of each.
    Tiles 23-26 and 27-2a match up freely with each other: there's one of each.
    Trick: When comparing tile IDs, if x>22 { x=x+1|3 }.

    Sprite address: @s-blank + 60*x.

    Tile x,y,z is rendered at [8*x+10, b*y-4*z+10]

    So mouse mx,my is tile  [ [mx-10]>>3, [[my-10+4*z]/b], z ]  for z=4..0
    ...also checking one tile left and one or two tiles up
)


( variables )

|0000
@i $2
@j $2
@p $2
@mx $2
@my $2
@highlighted $2

@pointer &x $2 &y $2

( program )

|0100 ( -> )
    #03ed .System/r DEO2
    #70e7 .System/g DEO2
    #6be7 .System/b DEO2
    #0110 .Screen/width DEO2
    #00e0 .Screen/height DEO2

    ;on-mouse .Mouse/vector DEO2
    ;prng-init JSR2
    ;new-game JSR2
    ;draw-turtle JSR2
BRK

@s1x1_mouse
	80c0 e0f0 c020 0000
@on-mouse
	;s1x1_mouse Ssa Aut0
	.pointer/x LDZ2 Ssx
	.pointer/y LDZ2 Ssy
	#40 Spr
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 Ssx
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 Ssy
	#42 Spr

    .highlighted LDZ2 #81 ;draw-tile-cover JSR2

    .Mouse/x DEI2 .Mouse/y DEI2
    ;mouse-to-tile JSR2
    DUP2 .highlighted STZ2
    #83 ;draw-tile-cover JSR2
BRK

@new-game
    ( Play a new-game-y sound: )
    #2202 .Audio0/adsr DEO2
    #0100 .Audio0/length DEO2
    ;wave-sus2 .Audio0/addr DEO2
    #88 .Audio0/volume DEO
    #18 .Audio0/pitch DEO

    ( Deal tiles into an array: )
    ;deal
    #01
&next-tile
    ( ptr* tile )
    DUP
    #23 LTH #03 MUL INC ( ptr* tile count )
&next-copy
    STH ROTk ROT STA STHr ( ptr* tile count )
    SWP2 INC2 SWP2 ( ptr* tile count )
    #01 SUB
    DUP ,&next-copy JCN POP
    INC
    DUP #2b LTH ,&next-tile JCN POP
    ;deal #0090 ;shuffle JSR2
JMP2r

@shuffle ( arr* len* -- ) ( Fisher-Yates shuffle )
    SWP2 STH2 ( len* )
&next-swap
    ;prng JSR2 OVR2 Mod2 ( i+1* j* )
    SWP2 #0001 SUB2 ( j* i* )
    .i STZ2 .j STZ2 ( )
    STH2rk .i LDZ2 ADD2 LDA ( arr[i] )
    STH2rk .j LDZ2 ADD2 LDA ( arr[i] arr[j] )
    STH2rk .i LDZ2 ADD2 STA ( arr[i] )
    STH2rk .j LDZ2 ADD2 STA ( )
    .i LDZ2 ( i* )
    DUP2 ORA ,&next-swap JCN
    POP2 POP2r
JMP2r

@draw-turtle
    ;turtle
&draw-row
    ( ptr* )
    INC2k LDA2 ( ptr* y z )
    Ext #fffc MUL2 ROT Ext #000b MUL2 ADD2 #0010 ADD2 ( ptr* -4z+11y+16 )
    Ssy ( ptr* )
    DUP2 #0003 ADD2 LDA ( ptr* num )
    DUP #00 EQU ;&done JCN2 ( ptr* num )
    Ext ( ptr* num^ )
&draw-row-tile
    #0001 SUB2 ( ptr* num^ )
    OVR2 LDA Ext ( ptr* num^ x^ )
    OVR2 DUP2 ADD2 ADD2 ( ptr* num^ xi^ )
    STH2 OVR2 INC2 LDA2 STH2r ( ptr* num^ y z xi^ )
    SWP2 ( ptr* num^ xi^ y z )
    OVR2 ROT Ext ( ptr* num^ xi^ y xi^ z^ )
    #90 SFT2 ORA2 ( ptr* num^ xi^ y xi^,z^ )
    ROT Ext #50 SFT2 ORA2  ( ptr* num^ xi^ idx* )
    .i LDZ2 ;deal ADD2 LDA ROT ROT  ( ptr* num^ xi^ tile idx* )
    ;board ADD2 STA ( ptr* num^ xi^ )
    #0008 MUL2 #0010 ADD2 ( ptr* num^ sprx^ )
    ( ROT2k NIP2 NIP2 #0002 ADD2 LDA Ext SUB2 )
    Ssx ( ptr* num^ )
    .i LDZ2 ;deal ADD2 LDA Ext #0060 MUL2 ;s-blank ADD2 Ssa Aut1ay
    .i LDZ2 INC2 .i STZ2
    #81 Sprrr
    .Screen/y DEI2 #0018 SUB2 Ssy
    DUP2 #0000 NEQ2 ;&draw-row-tile JCN2
    POP2 ( ptr* )
    #0004 ADD2
    ;&draw-row JMP2
&done
    ( ptr* num )
    POP POP2
JMP2r

@turtle
    ( x y z row-length )
    02 00 00 0c
    06 02 00 08
    04 04 00 0a
    02 06 00 0c
    00 07 00 01
    1a 07 00 02
    02 08 00 0c
    04 0a 00 0a
    06 0c 00 08
    02 0e 00 0c

    08 02 01 06
    08 04 01 06
    08 06 01 06
    08 08 01 06
    08 0a 01 06
    08 0c 01 06

    0a 04 02 04
    0a 06 02 04
    0a 08 02 04
    0a 0a 02 04

    0c 06 03 02
    0c 08 03 02

    0d 07 04 01
    00 00 00 00 ( end )

@deal ( Filled and shuffled to generate the board )
    $90

@board ( board[z<<9 | y<<5 | x] = tile )
    $0a00

@draw-tile ( xyz* col -- )
    ROT ROT ( col xyz* )
    STH2
    STH2rk ;board ADD2 LDA ( col tile -- )
    DUP ,&nonzero JCN  POP2r POP2 JMP2r  &nonzero
    Ext #0060 MUL2 ;s-blank ADD2 Ssa ( col -- )
    STH2rk #001f AND2 #0008 MUL2 #0010 ADD2 Ssx ( col -- )
    STH2rk #05 SFT2 #000f AND2 #000b MUL2 #0010 ADD2
    STH2rk #09 SFT2 #20 SFT2 SUB2 Ssy
    ( col -- )
    Aut1ay Sprrr ( -- )
    POP2r
JMP2r

@draw-tile-cover ( xyz* col -- )
    ROTk ROT ROT ;draw-tile JSR2
    POP ( xyz* )
    DUP2
    ( Redraw the whole column in front of xyz: )
    &next-y
    #0020 ADD2 ( y+=1 )
    #01ff AND2 ( z=0 )
    &next-z
    DUP2 #81 ;draw-tile JSR2
    #0200 ADD2 ( z++ )
    DUP2 #0a00 LTH2 ,&next-z JCN
    DUP2 #0be0 LTH2 ,&next-y JCN
    POP2

    #08ed EQU2 ,&is-top JCN
    #08ed #81 ;draw-tile JSR2
    &is-top
JMP2r

@mouse-to-tile ( mx* my* -- xyz* )
(
    Tile x,y,z is rendered at [8*x+10, b*y-4*z+10]

    So mouse mx,my is tile  [ [mx-10]>>3, [[my-10+4*z]/b], z ]  for z=4..0
    ...also checking one tile left and one or two tiles up
)
    .my STZ2 .mx STZ2

    #0004
    &next-z
    #0000
    &next-ty
    #0000
    &next-tx

    ( z* ty* tx* )
    ROT2k
    ( z* ty* tx* ty* tx* z* )
    STH2k ( save z* )
    .my LDZ2 #0010 SUB2 SWP2 #0004 MUL2 ADD2
    ( z* ty* tx* ty* tx* my-10+4z )
    #000b DIV2 ROT2 SUB2
    ( z* ty* tx* tx* my-10+4z/b-ty )
    DUP2 #0010 LTH2 ,&ok-y JCN
    POP2 POP2r ,&no-tile JMP
    &ok-y

    #50 SFT2
    .mx LDZ2 #0010 SUB2 #03 SFT2 ROT2 SUB2
    ( z* ty* tx* my-10+4z/b-ty<<5 mx-10>>3-tx )
    ORA2 STH2r #90 SFT2 ( restore and use z* )
    ORA2
    ( z* ty* tx* i* )
    DUP2 ;board ADD2 LDA
    ( z* ty* tx* i* tile )
    #00 EQU ,&no-tile JCN

    ( z* ty* tx* i* )
    DUP2 #0800 LTH2 ( z* ty* tx* i* i<800 )
    Ovrsb #0200 ADD2 ;board ADD2 LDA #00 GTH AND ( z* ty* tz* i* blocked )
    ,&no-tile JCN

    ( return i*: )
    NIP2 NIP2 NIP2 JMP2r

    &no-tile
    POP2
    ( z* ty* tx* )

    INC2
    DUP2 #0002 NEQ2 ;&next-tx JCN2
    POP2
    INC2
    DUP2 #0002 NEQ2 ;&next-ty JCN2
    POP2
    #0001 SUB2
    DUP2 #ffff NEQ2 ;&next-z JCN2
    POP2

    ( no tile found )
    #0000
JMP2r

@prng-init ( -- )

    ( seed )
    #00 .DateTime/second DEI
    #00 .DateTime/minute DEI #60 SFT2 EOR2
    #00 .DateTime/hour   DEI #c0 SFT2 EOR2 ,prng/x STR2
    #00 .DateTime/hour   DEI #04 SFT2
    #00 .DateTime/day    DEI #10 SFT2 EOR2
    #00 .DateTime/month  DEI #60 SFT2 EOR2
        .DateTime/year  DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

    LIT2 &x $2
    DUP2 #50 SFT2 EOR2
    DUP2 #03 SFT2 EOR2
    LIT2 &y $2 DUP2 ,&x STR2
    DUP2 #01 SFT2 EOR2 EOR2
    ,&y STR2k POP

JMP2r

~tiles.tal
~sus2.tal
